#+PROPERTY: header-args:emacs-lisp :lexical t
* Advent of Code 2020

** Setup

*** Lexical binding

Set lexical binding to apply to all org source blocks in the file by setting :lexical t in the src header

Or set it globally with

#+begin_example
#+PROPERTY: header-args:emacs-lisp :lexical t
#+end_example


** Problems

*** Day 1

**** Part 1

    #+begin_quote
     --- Day 1: Report Repair ---
 After saving Christmas five years in a row, you've decided to take a vacation at a nice resort on a tropical island. Surely, Christmas will go on without you.

 The tropical island has its own currency and is entirely cash-only. The gold coins used there have a little picture of a starfish; the locals just call them stars. None of the currency exchanges seem to have heard of them, but somehow, you'll need to find fifty of these coins by the time you arrive so you can pay the deposit on your room.

 To save your vacation, you need to get all fifty stars by December 25th.

 Collect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!

 Before you leave, the Elves in accounting just need you to fix your expense report (your puzzle input); apparently, something isn't quite adding up.

 Specifically, they need you to find the two entries that sum to 2020 and then multiply those two numbers together.

 For example, suppose your expense report contained the following:

 1721
 979
 366
 299
 675
 1456
 In this list, the two entries that sum to 2020 are 1721 and 299. Multiplying them together produces 1721 * 299 = 514579, so the correct answer is 514579.

 Of course, your expense report is much larger. Find the two entries that sum to 2020; what do you get if you multiply them together?
    #+end_quote


 Day 1 input: https://adventofcode.com/2020/day/1/input

 #+begin_src emacs-lisp

   (setq input-file-path "../input/1/input.txt")
   (setq goal-sum 2020)

   (defun find-sum-pair (vector goal)
     "Find a pair of items in a vector that add up to goal"
     (let
	 ((x 0) (y 0) (found nil))
       (while (and (not found) (< x (length vector)))
	 (while (and (not found) (< y (length vector)))
	   ;;(message (format "testing %d %d - %d %d" x y (aref vector x) (aref vector y))) 
	   (if (eq (+ (aref vector x) (aref vector y)) goal)
	       (setq found (list (aref vector x) (aref vector y)))
	     (setq y (+ y 1))
	     )
	   )
	 (setq x (+ x 1))
	 (setq y 0)
	 ;;(message (format "setting x to %x" x))
	 )
       found
       )
     )

   (find-sum-pair (vector 8 1 3 5) 6)

   (defun read-lines (filePath)
     "Return a list of lines of a file at filePath."
     (with-temp-buffer
       (insert-file-contents filePath)
       (split-string (buffer-string) "\n" t)))

   (defun read-file-to-number-vector (filepath)
     "Read the input data file, return a vector of numbers"
     (vconcat
      (mapcar 'string-to-number (read-lines filepath))
      )
     )

   (defun day1a-answer (filepath)
     (seq-reduce
      #'*
      (find-sum-pair (read-file-to-number-vector filepath) goal-sum)
      1))

   (day1a-answer input-file-path)
 #+end_src

 #+RESULTS:
 : 703131

**** Part 2

     #+begin_quote
     The Elves in accounting are thankful for your help; one of them even offers you a starfish coin they had left over from a past vacation. They offer you a second one if you can find three numbers in your expense report that meet the same criteria.

Using the above example again, the three entries that sum to 2020 are 979, 366, and 675. Multiplying them together produces the answer, 241861950.

In your expense report, what is the product of the three entries that sum to 2020?
     #+end_quote


#+begin_src emacs-lisp

  ;; Lets do it the hacky way. Recursive would be better

  (defun should-skip (a b c)
    "Skip if any of a b c are the same"
    (or
     (eq a b)
     (eq a c)
     (eq b c)
     )
    )

  (defun find-sum-triplet (vector goal)
    "Find three items in a vector that add up to goal"
    (let
	((x 0) (y 0) (z 0) (found nil))
      (while (and (not found) (< x (length vector)))
	(while (and (not found) (< y (length vector)))
	  (while (and (not found) (< z (length vector)))
	    ;;(message (format "testing %d %d - %d %d" x y (aref vector x) (aref vector y))) 
	    (if (and (not (should-skip x y z)) (eq (+ (aref vector x) (aref vector y) (aref vector z)) goal))
		(setq found (list (aref vector x) (aref vector y) (aref vector z)))
	      (setq z (+ z 1))
	      )
	    )
	  (setq y (+ y 1))
	  (setq z 0)
	  )
	(setq x (+ x 1))
	(setq y 0)
	)
      found
      )
    )

  (find-sum-triplet [1 2 3 4 5] 12)

  (defun day1b-answer (filepath)
    (seq-reduce
     #'*
     (find-sum-triplet (read-file-to-number-vector filepath) goal-sum)
     1))

  (day1b-answer filepath)

#+end_src

#+RESULTS:
: 272423970


